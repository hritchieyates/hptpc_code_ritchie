#include <string>
#include <sstream>
#include <iostream>
#include <fstream>
#include <vector>
#include "TSQLServer.h"
#include "TString.h"
#include "TCanvas.h"
#include "TGraph.h"
#include "TSQLResult.h"
#include "TString.h"
#include "TSQLRow.h"

void plotPeakPositionNewAm241(std::string Scheme= "noScheme", bool gain = true, std::string Anode = ""){
   TCanvas* c1 = new TCanvas("c1","Plots for peak position",200,10,500,500);
   // c1->SetGrid();
   std::vector<int> runNumbers;
   std::vector<int> gasAgeingRunNumbers;
   std::vector<std::string> resultFile;
   std::vector<std::string> gasAgeingResultFile;
   std::vector<std::string> paramsFile;
   std::vector<std::string> peaksFile;
   std::vector<std::string> bkgrFile;
   std::vector<double> runDate;
   std::vector<double> runDateTime;
   std::vector<double> gasAgeingRunDateTime;
   std::ifstream listFile;
   std::string listFileSuffix;
   std::string listFilePrefix;


   std::string AnodeName;
   if(Anode == ""){AnodeName = "Anode 3";}
   if(Anode == "Anode2"){AnodeName = "Anode 2";}
   if(Anode == "Anode1"){AnodeName = "Anode 1";}


   std::stringstream gasAgeingResultsSS;
   


   //    listFileSuffix = "_true_Am241";
   // listFilePrefix = "peakschi";
    //GasAgeing
    //SchemeA
   
   gasAgeingResultsSS << "/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/bkgFits/peakschi_raptorr_tpcdata_gain_R2081070-R2081084_true_Am241.root" << Anode << ".dat";
   gasAgeingResultFile.push_back(gasAgeingResultsSS.str());
    //paramsFile.push_back("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/parameters_raptorr_tpcdata_gain_R2081070-R2081084_true_Am241.root.dat");
    //SchemeB
   std::stringstream gasAgeingResultsSS;
   gasAgeingResultsSS << "/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/bkgFits/peakschi_raptorr_tpcdata_gain_R2082009-R2082024_true_Am241.root" << Anode << ".dat";
   gasAgeingResultFile.push_back(gasAgeingResultsSS.str());  
   //paramsFile.push_back("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/parameters_raptorr_tpcdata_gain_R2082009-R2082024_true_Am241_AllTrig.root.dat");
    //SchemeC
   std::stringstream gasAgeingResultsSS;
   gasAgeingResultsSS << "/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/bkgFits/peakschi_raptorr_tpcdata_gain_R2083022-R2083032_true_Am241.root" << Anode << ".dat";
   gasAgeingResultFile.push_back(gasAgeingResultsSS.str());

//paramsFile.push_back("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/parameters_raptorr_tpcdata_gain_R2083022-R2083032_Am241.root.dat");
    
    //SchemeZ
    /*resultFile.push_back("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/peakschi_raptorr_tpcdata_gain_R2080141-R2080165_true_Am241.root.dat");
    paramsFile.push_back("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/parameters_raptorr_tpcdata_gain_R2080141-R2080165_true_Am241.root.dat");
    //SchemeY
    resultFile.push_back("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/peakschi_raptorr_tpcdata_gain_R2079057-R2079062_true_Am241.root.dat");
    paramsFile.push_back("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/parameters_raptorr_tpcdata_gain_R2079057-R2079062_true_Am241.root.dat");
    */
    
    //runNumbers.push_back(2080149);
    //    gasAgeingRunNumbers.push_back(2081073);
    //gasAgeingRunNumbers.push_back(2082012);
    //gasAgeingRunNumbers.push_back(2083025);
    //runNumbers.push_back(2080147);
    //runNumbers.push_back(2079060);
    
    //runDate.push_back(20);
    //runDate.push_back(19);
    gasAgeingRunDateTime.push_back(21.353);
    gasAgeingRunDateTime.push_back(22.36373);
    gasAgeingRunDateTime.push_back(23.33407);
    //runDateTime.push_back(20.68969);
    //runDateTime.push_back(19.89427);
  


    //Get gas ageing peak parameters from file                                                                                 
    std::vector<double> gasAgeingPeaks;
    std::vector<double> gasAgeingPeakErrors;
    std::vector<double> gasAgeingChis;
    std::vector<double> gasAgeingNdfs;
    std::vector<double> gasAgeingChisNdfs;
    std::vector<double> gasAgeingScaledPeakErrors;

    for(int iGasAgeingResults = 0; iGasAgeingResults < gasAgeingResultFile.size(); iGasAgeingResults++){
      std::cout << "File to get gas ageingpeak from is " << gasAgeingResultFile[iGasAgeingResults] << std::endl;
      std::ifstream gasAgeingFile;
      gasAgeingFile.open(gasAgeingResultFile[iGasAgeingResults].c_str());
      if(gasAgeingFile.is_open()){
	double gasAgeingPeak, gasAgeingPeakErr, gasAgeingChi, gasAgeingNdf;
	gasAgeingFile >> gasAgeingPeak >> gasAgeingPeakErr >> gasAgeingChi >> gasAgeingNdf;
	std::cout << "gasAgeing Peak Position in mV is " << gasAgeingPeak << " error is " << gasAgeingPeakErr << std::endl;
	gasAgeingPeaks.push_back(gasAgeingPeak);
	gasAgeingPeakErrors.push_back(gasAgeingPeakErr);
	gasAgeingChis.push_back(gasAgeingChi);
	gasAgeingNdfs.push_back(gasAgeingNdf);
      }
      else{ std::cout << "Cannot open gas ageing peak file" << gasAgeingResultFile[iGasAgeingResults] << std::endl;}
    }


    //Scale Gas Ageing Errors by Chisquare/NDF                                                              
    for(int gasAgeingchisub1 = 0; gasAgeingchisub1 < gasAgeingChis.size(); gasAgeingchisub1++){
      for(int gasAgeingndfsub1 = 0; gasAgeingndfsub1 < gasAgeingNdfs.size(); gasAgeingndfsub1++){
	if(gasAgeingchisub1 == gasAgeingndfsub1){
	  if(!(gasAgeingNdfs[gasAgeingndfsub1] > 0)){
	    std::cout << "gasAgeing ndf is bad :(" << std::endl;
	    gasAgeingChisNdfs.push_back(1);
	  }
	  else{
	    gasAgeingChisNdfs.push_back(sqrt(gasAgeingChis[gasAgeingchisub1] / gasAgeingNdfs[gasAgeingchisub1]));
	    std::cout << "gasAgeing ndf is good :)" << std::endl;
	  }
	}
      }
    }
    for(int gasAgeingerrorsub2a = 0; gasAgeingerrorsub2a < gasAgeingPeakErrors.size(); gasAgeingerrorsub2a++){
      for(int gasAgeingerrorsub2b = 0; gasAgeingerrorsub2b < gasAgeingChisNdfs.size(); gasAgeingerrorsub2b++){
	if(gasAgeingerrorsub2a == gasAgeingerrorsub2b){
	  gasAgeingScaledPeakErrors.push_back(gasAgeingPeakErrors[gasAgeingerrorsub2a] * gasAgeingChisNdfs[gasAgeingerrorsub2b]);
	  std::cout << "I've scaled the errors sir!" << std::endl;
	}
      }
    }


    std::cout << "I'm ready to make a plot, here I gooooo... OH SHIT!..." << std::endl;
    //Make gas ageing plot
    TGraphErrors* gasAgeingPeakGraph = new TGraphErrors(3,&(gasAgeingRunDateTime[0]),&(gasAgeingPeaks[0]),0,&(gasAgeingScaledPeakErrors[0]));
    //plotTitle << "Run Start Time";
    //xAxisName = "Run Start Time (Date)";
    //    gasAgeingPeakGraph->SetMarkerColor(9);
    //gasAgeingPeakGraph->SetMarkerStyle(33);
    //gasAgeingPeakGraph->SetLineColor(9);
    //gasAgeingPeakGraph->GetXaxis()->SetDecimals(false);

   //Fit Gas ageing plot and work out corrections from it
    std::cout << "Making the plot went exactly as planned! now it's time to fit it!" << std::endl;
    gasAgeingPeakGraph.Draw("AP");
    gasAgeingPeakGraph->Fit("pol1");
    c1->Print(("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/AUTO_CORRECTED_UNCERTAIN_BKGR12_TEST_GASAGEING_"+AnodeName+".pdf").c_str());
    Double_t Interp_1day_A1 = gasAgeingPeakGraph->Eval(21.353, 0, "");
    Double_t Interp_1day_A2 = gasAgeingPeakGraph->Eval(21.513, 0, "");
    Double_t Interp_1day_A3 = gasAgeingPeakGraph->Eval(21.555, 0, "");
    Double_t Interp_1day_A4 = gasAgeingPeakGraph->Eval(21.631, 0, "");
    Double_t Interp_1day_A5 = gasAgeingPeakGraph->Eval(21.786, 0, "");
    
    Double_t Interp_1day_B1 = gasAgeingPeakGraph->Eval(22.380, 0, "");
    
    Double_t Interp_1day_Bneg2 = gasAgeingPeakGraph->Eval(23.018, 0, ""); 
    Double_t Interp_1day_Bneg1 = gasAgeingPeakGraph->Eval(23.965, 0, ""); 
    Double_t Interp_1day_B0 = gasAgeingPeakGraph->Eval(23.914, 0, "");
    Double_t Interp_1day_B8 = gasAgeingPeakGraph->Eval(22.894, 0, ""); 
    Double_t Interp_1day_B7 = gasAgeingPeakGraph->Eval(22.874, 0, "");
    Double_t Interp_1day_B6 = gasAgeingPeakGraph->Eval(22.814, 0, "");
    Double_t Interp_1day_B5 = gasAgeingPeakGraph->Eval(22.724, 0, "");
    Double_t Interp_1day_B4 = gasAgeingPeakGraph->Eval(22.633, 0, "");
    Double_t Interp_1day_B3 = gasAgeingPeakGraph->Eval(22.558, 0, "");
    Double_t Interp_1day_B2 = gasAgeingPeakGraph->Eval(22.471, 0, "");
    Double_t Interp_1day_B1 = gasAgeingPeakGraph->Eval(22.380, 0, "");

    Double_t Interp_1day_C1 = gasAgeingPeakGraph->Eval(23.339, 0, "");

    Double_t Interp_1day_Cneg4 = gasAgeingPeakGraph->Eval(23.848, 0, "");
    Double_t Interp_1day_Cneg3 = gasAgeingPeakGraph->Eval(23.796, 0, "");
    Double_t Interp_1day_Cneg2 = gasAgeingPeakGraph->Eval(23.744, 0, "");
    Double_t Interp_1day_Cneg1 = gasAgeingPeakGraph->Eval(23.693, 0, "");
    Double_t Interp_1day_C0 = gasAgeingPeakGraph->Eval(23.636, 0, "");
    Double_t Interp_1day_C1 = gasAgeingPeakGraph->Eval(23.339, 0, "");
    Double_t Interp_1day_C2 = gasAgeingPeakGraph->Eval(23.41, 0, "");
    Double_t Interp_1day_C3 = gasAgeingPeakGraph->Eval(23.470, 0, "");
    Double_t Interp_1day_C4 = gasAgeingPeakGraph->Eval(23.527, 0, "");


    std::cout << "Interp_1day_A1 = " << Interp_1day_A1 << std::endl;
    std::cout << "Interp_1day_A2 = " << Interp_1day_A2 << std::endl;
    std::cout << "Interp_1day_A3 = " << Interp_1day_A3 << std::endl;
    std::cout << "Interp_1day_A4 = " << Interp_1day_A4 << std::endl;
    std::cout << "Interp_1day_A5 = " << Interp_1day_A5 << std::endl;
    std::cout << "Interp_1day_B1 = " << Interp_1day_B1 << std::endl;
    std::cout << "Interp_1day_C1 = " << Interp_1day_C1 << std::endl;

    std::cout << "Correction_to_A1 = " << Interp_1day_C1 - Interp_1day_A1 << std::endl;
    std::cout << "Correction_to_A2 = " << Interp_1day_C1 - Interp_1day_A2 << std::endl;
    std::cout << "Correction_to_A3 = " << Interp_1day_C1 - Interp_1day_A3 << std::endl;
    std::cout << "Correction_to_A4 = " << Interp_1day_C1 - Interp_1day_A4 << std::endl;
    std::cout << "Correction_to_A5 = " << Interp_1day_C1 - Interp_1day_A5 << std::endl;

    std::vector<double> PeakCorrections;

    if(Scheme == "SchemeCMod4"){
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_Cneg4);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_Cneg3);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_Cneg2);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_Cneg1);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_C0);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_C1);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_C2);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_C3);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_C4);
    }


    if(Scheme == "SchemeBMod4"){
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_Bneg2);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_Bneg1);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_B0);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_B8);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_B7);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_B6);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_B5);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_B4);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_B3);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_B2);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_B1);
    }

    if(Scheme == "SchemeA"){
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_A1);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_A2);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_A3);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_A4);
      PeakCorrections.push_back(Interp_1day_C1 - Interp_1day_A5);
    }


   

    Double_t ageingUncertainty = ageingUncertainty = Interp_1day_C1 - Interp_1day_A1;

    std::cout << "ageingUncertainty is " << ageingUncertainty << std::endl;

  std::cout << "Scheme is " << Scheme << std::endl;

  //SchemeBModSpecialTrigAll, SchemeBMod2, SchemeC, SchemeA
  std::stringstream listFileNameSS;
  std::string listFileName;  
  listFileNameSS << "/scratch0/hrichie/hptpc_ritchie/HPTPC/code/raptorrlinapp2/raptorr/scripts/bkgVsSignal/runsToPlot" << Scheme;
  listFileNameSS >> listFileName;
  std::cout << "listFileName is" << listFileName << std::endl;
  listFile.open(listFileName.c_str());

  //listFile.open("/scratch0/hrichie/hptpc_ritchie/HPTPC/code/raptorrlinapp2/raptorr/scripts/bkgVsSignal/runsToPlotSchemeA");


  //SchemeA -> _true_Am241                                                                                                                                                                                 
  //SchemeC -> _Am241                                                                                                                                                                                      
  //SchemeB -> _true_Am241_AllTrig (and include the weird ones above)  
  
  if(Scheme == "SchemeYZ" || Scheme == "AllSchemesMod3"){
    listFileSuffix = "_true_Am241";
    listFilePrefix = "peakschi";
    runNumbers.push_back(2079029);
    runNumbers.push_back(2079060);
    //runNumbers.push_back(2080002);
    runNumbers.push_back(2080013);
    runNumbers.push_back(2080150);
    runDateTime.push_back(19.727);
    runDateTime.push_back(19.917);
    //runDateTime.push_back(19.973);
    runDateTime.push_back(20.040);
    runDateTime.push_back(20.730);
  }

  if(Scheme == "SchemeA" || Scheme == "AllSchemesMod3"){  
    listFileSuffix = "_true_Am241";
    listFilePrefix = "peakschi";
    runNumbers.push_back(2081073); //1200V
    runNumbers.push_back(2081109); //1400V
    runNumbers.push_back(2081118); //1600V
    runNumbers.push_back(2081132); //1800V
    runNumbers.push_back(2081168); //2000V
    runDateTime.push_back(21.353);
    runDateTime.push_back(21.513);
    runDateTime.push_back(21.556);
    runDateTime.push_back(21.631);
    runDateTime.push_back(21.786);
  }
  if(Scheme == "SchemeCMod4" || Scheme == "AllSchemesMod3"){
    listFileSuffix = "_true_Am241";
    listFilePrefix = "peakschi";
    runNumbers.push_back(2083107); //bad? //200V
    runNumbers.push_back(2083097);//bad?  //400V
    runNumbers.push_back(2083087);//bad?  //600V 
    runNumbers.push_back(2083077); //800V
    runNumbers.push_back(2083067); //1000V
    runNumbers.push_back(2083023);// 1200V
    runNumbers.push_back(2083036); //1400V
    runNumbers.push_back(2083047); //1600V
    runNumbers.push_back(2083057); //1800V
    runDateTime.push_back(23.848);//bad?  
        runDateTime.push_back(23.796);//bad?  
    runDateTime.push_back(23.744);//bad?  
    runDateTime.push_back(23.693);
    runDateTime.push_back(23.636);
    runDateTime.push_back(23.339);
    runDateTime.push_back(23.41);
    runDateTime.push_back(23.470);
    runDateTime.push_back(23.527);    
  }
  if(Scheme == "SchemeBModSpecialTrigAll"){
    listFileSuffix = "_true_Am241_AllTrig";
    listFilePrefix = "peakschifirst";
    resultFile.push_back("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/peakschifirst_raptorr_tpcdata_gain_R2084009-R2084018_true_TEST_Am241.root.dat");
    resultFile.push_back("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/peakschifirst_raptorr_tpcdata_gain_R2083126-R2084008_Am241.root.dat");
    resultFile.push_back("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/peakschifirst_raptorr_tpcdata_gain_R2083116-R2083125_Am241.root.dat");
    paramsFile.push_back("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/parameters_raptorr_tpcdata_gain_R2084009-R2084018_true_TEST_Am241.root.dat");
    paramsFile.push_back("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/parameters_raptorr_tpcdata_gain_R2083126-R2084008_Am241.root.dat");
    paramsFile.push_back("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/parameters_raptorr_tpcdata_gain_R2083116-R2083125_Am241.root.dat");
    runNumbers.push_back(2084011);
  }
  if(Scheme == "SchemeBMod4" || Scheme == "AllSchemesMod3"){
    listFileSuffix = "_true_Am241";
    listFilePrefix = "peakschi";
        runNumbers.push_back(2084012); //bad? // 0V
    runNumbers.push_back(2084002); //bad? 400V
    runNumbers.push_back(2083119); //800V
    runNumbers.push_back(2082108); //bad? //2600V 
    runNumbers.push_back(2082098); //2400V
    runNumbers.push_back(2082088); //2200V
    runNumbers.push_back(2082073); //2000V
    runNumbers.push_back(2082058); //1800V
    runNumbers.push_back(2082044); //1600V
    runNumbers.push_back(2082028); //1400V
    runNumbers.push_back(2082012); //1200V
    runDateTime.push_back(23.018); //bad? 
    runDateTime.push_back(23.965); //bad? 
    runDateTime.push_back(23.914);
    runDateTime.push_back(22.894); //bad? 
    runDateTime.push_back(22.874);
    runDateTime.push_back(22.814);
    runDateTime.push_back(22.724);
    runDateTime.push_back(22.633);
    runDateTime.push_back(22.558);
    runDateTime.push_back(22.471);
    runDateTime.push_back(22.380);
  }
  


  std::string fileLine;
  if(listFile.is_open()){
    std::cout << "listFile is open" << std:: endl;
    while (std::getline(listFile, fileLine)){
      std::stringstream resultsSS;
      std::stringstream paramsSS;
      std::stringstream peaksSS;
      std::stringstream bkgrSS;
      std::string resultsString = "";
      std::string paramsString = "";
      std::string peaksString = "";
      std::string bkgrString = "";
      std::cout << "Get Line is " << fileLine << std::endl;
      resultsSS << "/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/bkgFits/" << listFilePrefix << "_raptorr_tpcdata_gain_" << fileLine << listFileSuffix << ".root" << Anode << ".dat";
      paramsSS << "/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/bkgFits/parameters_raptorr_tpcdata_gain_" << fileLine << listFileSuffix << ".root" << Anode << ".dat"; 
      peaksSS << "/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/bkgFits/peaks_raptorr_tpcdata_gain_" << fileLine << listFileSuffix << ".root" << Anode << ".dat"; 
      bkgrSS << "/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/bkgFits/bkgrparams_raptorr_tpcdata_gain_" << fileLine << listFileSuffix << ".root" << Anode << ".dat";
      resultsSS >> resultsString;
      paramsSS >> paramsString;
      peaksSS >> peaksString;
      bkgrSS >> bkgrString;
      resultFile.push_back(resultsString);
      paramsFile.push_back(paramsString);
      peaksFile.push_back(peaksString);
      bkgrFile.push_back(bkgrString);
    }
  }
  //SchemeA -> _true_Am241
  //SchemeC -> _Am241
  //SchemeB -> _true_Am242_AllTrig


   // data storage
   std::vector<double> schemeACustomVoltage;
   std::vector<double> schemeBCustomVoltage;
   std::vector<double> schemeCCustomVoltage;
   std::vector<double> gasAgeingCustomVoltage;
   std::vector<double> customVoltage;

   std::vector<double> cVoltage;
   std::vector<double> a1Voltage;
   std::vector<double> a2Voltage;
   std::vector<double> a3Voltage;
   std::vector<double> a3a2Voltage;
   std::vector<double> a3a1Voltage;
   std::vector<double> a2a1Voltage;
   std::vector<double> suma2a1Voltage;
   std::vector<double> sumVoltage;
   std::vector<double> pressure;
   std::vector<double> absPressure;
   std::vector<double> a1VP;
   std::vector<double> a1VPtest;
   std::vector<double> a2VP;
   std::vector<double> a3VP;
   std::vector<double> a3a2VP;
   std::vector<double> a3a1VP;
   std::vector<double> a2a1VP;
   std::vector<double> sumVP;
   std::vector<double> cVP;
   std::vector<std::vector<double> > vectorVP;
   std::vector<std::vector<double> > vectorVoltage;

   // ... more vectors
   std::vector<double> Peaks1;
   std::vector<double> Peaks2;
   std::vector<double> peakErrors1;
   std::vector<double> peakErrors2;
   std::vector<double> Chis1;
   std::vector<double> Chis4;
   std::vector<double> Ndfs1;
   std::vector<double> Ndfs4;
   std::vector<double> ChisNdfs4;
   std::vector<double> scaledpeakErrors1;
   std::vector<double> scaledpeakErrors2;
   std::vector<double> peakWidth1;
   std::vector<double> peakWidth2;
   std::vector<double> scaledpeakWidth1;
   std::vector<double> scaledpeakWidth2;
   std::vector<double> Bkg1;
   std::vector<double> Bkg2;
   std::vector<double> Bkgrs1;
   std::vector<double> Bkgrs2;
   std::vector<double> BkgrErrors1;
   std::vector<double> BkgrErrors2;
   std::vector<double> scaledBkgrErrors1;
   std::vector<double> scaledBkgrErrors2;
   std::vector<double> ageingUncertaintyVector;

   //Scheme A                                                                                                                                                            
   schemeACustomVoltage.push_back(1200);
   schemeACustomVoltage.push_back(1400);
   schemeACustomVoltage.push_back(1600);
   schemeACustomVoltage.push_back(1800);
   schemeACustomVoltage.push_back(2000);

   //Scheme C
   schemeCCustomVoltage.push_back(200);
   schemeCCustomVoltage.push_back(400);
   schemeCCustomVoltage.push_back(600);
   schemeCCustomVoltage.push_back(800);
   schemeCCustomVoltage.push_back(1000);
   schemeCCustomVoltage.push_back(1200);
   schemeCCustomVoltage.push_back(1400);
   schemeCCustomVoltage.push_back(1600);
   schemeCCustomVoltage.push_back(1800);
   

   //Scheme B
   //   schemeBCustomVoltage.push_back(0);
   schemeBCustomVoltage.push_back(0);
   schemeBCustomVoltage.push_back(400);
   schemeBCustomVoltage.push_back(800);
   schemeBCustomVoltage.push_back(2600);
   schemeBCustomVoltage.push_back(2400);
   schemeBCustomVoltage.push_back(2200);
   schemeBCustomVoltage.push_back(2000);
   schemeBCustomVoltage.push_back(1800);
   schemeBCustomVoltage.push_back(1600);
   schemeBCustomVoltage.push_back(1400);
   schemeBCustomVoltage.push_back(1200);
   
   
   //GasAgeing
   gasAgeingCustomVoltage.push_back(1200);
   gasAgeingCustomVoltage.push_back(1200);
   gasAgeingCustomVoltage.push_back(1200);
   gasAgeingCustomVoltage.push_back(1200);
   gasAgeingCustomVoltage.push_back(1200);

   //Get voltages from database

   // list of information to be extracted from the XML data base                                                                                                                     
   TString mysqlFieldsToQuery[7] = {"run_number",      "start_time",      "end_time",        "mean_cathode_V",  "mean_anode1_V",   "mean_anode2_V",   "mean_anode3_V"};

   for(int run = 0; run < runNumbers.size(); run++){
     // connect to a mysql server                                                                                                                                                    
     TSQLServer *xmlInformationDatabase = TSQLServer::Connect("mysql://dmdbserv.pp.rhul.ac.uk/GOOD_RUNS", "dmatter", "seedark");
     if( xmlInformationDatabase->IsError() ) { std::cout << "There is an Error with the Database" << std::endl; }

     // we construct the xml query which will give us all the information we need for the particular run                                                                             
     TString mysql_query = "SELECT ";
     for(Int_t iBuildFullQuerry = 0; iBuildFullQuerry < 7; iBuildFullQuerry++){
       if(iBuildFullQuerry !=0) {mysql_query+=", "+mysqlFieldsToQuery[iBuildFullQuerry];}
       else{ mysql_query+=" "+mysqlFieldsToQuery[iBuildFullQuerry]; }
     }
     TString runNumberString;
     runNumberString.Form("%i", runNumbers.at(run));
     mysql_query+=" FROM run_info_lite WHERE start_time>='2019-01-01 00:00:00' AND run_number="+runNumberString;
     //Now execute the query and put it in a TSQLResult object                                                                                                                       
     TSQLResult *mysql_result = xmlInformationDatabase->Query(mysql_query);
     if (!mysql_result) {
       std::cout << "Error when Querying Database" << std::endl;
       std::cout << "You probaly don't want this runs data " << std::endl;
       continue;
     }


     // the result is one row of data (in case nothing went wrong)                                                               
     if(mysql_result->GetRowCount() != 1) {
       if(mysql_result->GetRowCount() == 0) {
	 std::cout << "Error, no xml information found for run " << runNumberString << std::endl;
         // abort                                                                                                                
         continue;
       }
     }

     TSQLRow *mysql_row = mysql_result->Next();

     std::cout << "C \t"  <<  atof(mysql_row->GetField(3)) << std::endl;
     std::cout << "A1\t" <<  atof(mysql_row->GetField(4)) << std::endl;
     std::cout << "A2\t" <<  atof(mysql_row->GetField(5)) << std::endl;
     std::cout << "A3\t" <<  atof(mysql_row->GetField(6)) << std::endl;
     //     std::cout << "Start Time\t" << atof_l(mysql_row->GetField(1), "\t") << std::endl;
     //std::cout << "Pressure \t" << atof(mysql_row->GetField(7)) << std::endl;       
     cVoltage.push_back(atof(mysql_row->GetField(3)));
     a1Voltage.push_back(atof(mysql_row->GetField(4)));
     a2Voltage.push_back(atof(mysql_row->GetField(5)));
     a3Voltage.push_back(atof(mysql_row->GetField(6)));
     //     pressure.push_back(atof(mysql_row->GetField(7)));                                                                    
   }

   //Do some mathsy things with the voltages                                                                            
   for(int voltsuba = 0; voltsuba < a3Voltage.size(); voltsuba++){
     for(int voltsubb = 0; voltsubb < a2Voltage.size(); voltsubb++){
       if(voltsuba == voltsubb){
         a3a2Voltage.push_back(a3Voltage[voltsuba] - a2Voltage[voltsuba]);
       }
     }
   }

   for(int voltsubc = 0; voltsubc < a3Voltage.size(); voltsubc++){
     for(int voltsubd = 0; voltsubd < a1Voltage.size(); voltsubd++){
       if(voltsubc == voltsubd){
         a3a1Voltage.push_back(a3Voltage[voltsubc] - a1Voltage[voltsubc]);
       }
     }
   }

   for(int voltsube = 0; voltsube < a2Voltage.size(); voltsube++){
     for(int voltsubf = 0; voltsubf < a1Voltage.size(); voltsubf++){
       if(voltsube == voltsubf){
         a2a1Voltage.push_back(a2Voltage[voltsube] - a1Voltage[voltsube]);
       }
     }
   }

   for(int voltsuma = 0; voltsuma < a2Voltage.size(); voltsuma++){
     for(int voltsumb = 0; voltsumb < a1Voltage.size(); voltsumb++){
       if(voltsuma == voltsumb){
         suma2a1Voltage.push_back(a2Voltage[voltsuma] + a1Voltage[voltsumb]);
       }
     }
   }
   for(int voltsumc = 0; voltsumc < suma2a1Voltage.size(); voltsumc++){
     for(int voltsumd = 0; voltsumd < a3Voltage.size(); voltsumd++){
       if(voltsumc == voltsumd){
         sumVoltage.push_back(suma2a1Voltage[voltsumc] + a3Voltage[voltsumd]);
       }
     }
   }

   //Test of V/P for just one voltage                                                                                   
   /*                                                                                                                   
   for(int a1vpib = 0; a1vpib < a1Voltage.size(); a1vpib++){                                                            
     for(int a1vpjb = 0; a1vpjb < pressure.size(); a1vpjb++){                                                           
       if(a1vpib == a1vpjb){                                                                                            
         a1VPtest.push_back(a1Voltage[a1vpib] / pressure[a1vpib]);                                                      
       }                                                                                                                
     }                                                                                                                  
   }                                                                                                                    
   */

   //Pressure to absolute pressure (assuming pRoon = 1 until we get proper pressure measurements)                       
   for(int presi = 0; presi < pressure.size(); presi++){
     if(pressure[presi] > 0){
       absPressure.push_back(pressure[presi] + 1);
     }
     else{
       absPressure.push_back(pressure[presi - 1] + 1);
     }
   }


   //Divide voltage by pressure                                                                                         
   vectorVoltage.push_back(a1Voltage);
   vectorVoltage.push_back(a2Voltage);
   vectorVoltage.push_back(a3Voltage);
   vectorVoltage.push_back(a3a2Voltage);
   vectorVoltage.push_back(a3a1Voltage);
   vectorVoltage.push_back(a2a1Voltage);
   vectorVoltage.push_back(sumVoltage);
   vectorVoltage.push_back(cVoltage);
   vectorVP.push_back(a1VP);
   vectorVP.push_back(a2VP);
   vectorVP.push_back(a3VP);
   vectorVP.push_back(a3a2VP);
   vectorVP.push_back(a3a1VP);
   vectorVP.push_back(a2a1VP);
   vectorVP.push_back(sumVP);
   vectorVP.push_back(cVP);
   for(int VPi = 0; VPi < vectorVP.size(); VPi++){
     for(int a1vpi = 0; a1vpi < vectorVoltage[VPi].size(); a1vpi++){
       for(int a1vpj = 0; a1vpj < absPressure.size(); a1vpj++){
         if(a1vpi == a1vpj){
           vectorVP[VPi].push_back(vectorVoltage[VPi][a1vpi] / absPressure[a1vpi]);
         }
       }
     }
   }

   //Get bkgr parameters from file                                                                                                                              
   for(int iBkgr = 0; iBkgr < bkgrFile.size(); iBkgr++){
     std::cout << "File to get peak from is " << bkgrFile[iBkgr] << std::endl;
     std::ifstream file;
     file.open(bkgrFile[iBkgr].c_str());
     if(file.is_open()){
       double bkgr11, bkgr12, bkgrError11, bkgrError12;
       file >> bkgr11 >> bkgr12 >> bkgrError11 >> bkgrError12;
       std::cout << "bkgr11 is  " << bkgr11 << " error is " << bkgrError11 << std::endl;
       std::cout << "bkgr12 is  " << bkgr12 << " error is " << bkgrError12 << std::endl;
       Bkgrs1.push_back(bkgr11);
       Bkgrs2.push_back(bkgr12);
       BkgrErrors1.push_back(bkgrError11);
       BkgrErrors2.push_back(bkgrError12);
     }
     else{ std::cout << "Cannot open bkgr file" << bkgrFile[iBkgr] << std::endl;}
   }


   //Get peak parameters from file
   for(int iResults = 0; iResults < resultFile.size(); iResults++){
     std::cout << "File to get peak from is " << resultFile[iResults] << std::endl;
     std::ifstream file;
     file.open(resultFile[iResults].c_str());
     if(file.is_open()){
       double peak2, peak2err, chi1, ndf1;
       file >> peak2 >> peak2err >> chi1 >> ndf1;
       std::cout << "Peak Position in mV is " << peak2 << " error is " << peak2err << std::endl;
       if(Scheme == "SchemeA" || Scheme == "SchemeBMod4"|| Scheme == "SchemeCMod4"){
	 double peakCorrection = PeakCorrections[iResults];
	 double correctedPeak2 = peak2 + peakCorrection;
	 std::cout << "Peak Correction is " << peakCorrection << "corrected peak pos is " << correctedPeak2 << std::endl;
         Peaks2.push_back(correctedPeak2);
       }
       else{
         Peaks2.push_back(peak2);
       }
       peakErrors2.push_back(peak2err);
       Chis4.push_back(chi1);
       Ndfs4.push_back(ndf1);
       }
     else{ std::cout << "Cannot open peak file" << resultFile[iResults] << std::endl;}
   }
   
 

   //Get peak parameters from file
   for(int iParams = 0; iParams < paramsFile.size(); iParams++){
     std::ifstream file2;
     file2.open(paramsFile[iParams].c_str());
     if(file2.is_open()){
     double bkgr11,bkgr12,peak11,peak12,peak13,peak21,peak22,peak23;
     file2 >> bkgr11 >> bkgr12 >> peak11 >> peak12 >> peak13 >> peak21 >> peak22 >> peak23;
     //peakWidth1.push_back(abs(peak13));
     std::cout << "Peak Position in mV is " << peak12 << " width is " << peak13 << std::endl;
     peakWidth2.push_back(abs(peak13));
     Bkg1.push_back(bkgr11);
     Bkg2.push_back(bkgr12);
     }
     else{ std::cout << "Cannot open params file" << paramsFile[iParams] << std::endl;}
   }

   //Scale Errors by Chisquare/NDF
   for(int chisub1 = 0; chisub1 < Chis4.size(); chisub1++){
     for(int ndfsub1 = 0; ndfsub1 < Ndfs4.size(); ndfsub1++){
       if(chisub1 == ndfsub1){
	 if(!(Ndfs4[ndfsub1] > 0)){
	   std::cout << "ndf is bad :(" << std::endl;
	   ChisNdfs4.push_back(1);
	 }
	 else{	   
	   ChisNdfs4.push_back(sqrt(Chis4[chisub1] / Ndfs4[chisub1])); 
	 }
       }
     }
   }
    for(int errorsub2a = 0; errorsub2a < peakErrors2.size(); errorsub2a++){
     for(int errorsub2b = 0; errorsub2b < ChisNdfs4.size(); errorsub2b++){
       if(errorsub2a == errorsub2b){
	 scaledpeakErrors2.push_back(peakErrors2[errorsub2a] * ChisNdfs4[errorsub2b]);
	 scaledBkgrErrors1.push_back(BkgrErrors1[errorsub2a] * ChisNdfs4[errorsub2b]);
	 scaledBkgrErrors2.push_back(BkgrErrors2[errorsub2a] * ChisNdfs4[errorsub2b]);
	 scaledpeakWidth2.push_back(peakWidth2[errorsub2a] / 2);
	 ageingUncertaintyVector.push_back(ageingUncertainty);
       }
     }
   }

   


 

   //Constants for gain measurement
   std::vector<double> Gains2;
   std::vector<double> Gains1;
   std::vector<double> gainErrors2;
   std::vector<double> gainErrors1;
   std::vector<double> gainWidth1;
   std::vector<double> gainWidth2;
   std::vector<double> gainAgeingUncertainty;
   Double_t gPreamp;
   if(Anode == ""){
     gPreamp = 5.18e12;
   }
   else if(Anode == "Anode2"){
     gPreamp = 9.8e12;
   }
   else if(Anode == "Anode1"){
     gPreamp = 12e12;
   }
   else{std::cout << "no anode chosen" << std::endl;}
   Double_t eDep512 = 512e3;
   Double_t eDep661 = 612e3;
   Double_t eDep1174 = 1174e3;
   Double_t eDep60 = 60e3;
   Double_t eDepAlpha = 3.5e6;
   Double_t workFunc = 27.4;
   Double_t qE = 1.6e-19;
   //   Double_t gCalcConst = gPreamp * qE / workFunc;
   Double_t gCalcConst = workFunc / (gPreamp * eDepAlpha * qE); 

   //Turn peaks into gain
    for(int gcalcj = 0; gcalcj < Peaks2.size(); gcalcj++){
     Gains2.push_back(Peaks2[gcalcj] * gCalcConst);
     gainErrors2.push_back(scaledpeakErrors2[gcalcj] * gCalcConst);
     gainWidth2.push_back(scaledpeakWidth2[gcalcj] * gCalcConst);
     gainAgeingUncertainty.push_back(ageingUncertaintyVector[gcalcj] * gCalcConst);
     std::cout << "Peak is " << Peaks2[gcalcj] << ", gain is " << Gains2[gcalcj] << std::endl;
     std::cout << "Gain Uncertainty is " << gainAgeingUncertainty[gcalcj] << std::endl;

    }

    std::vector<double> xplot;
    std::vector<double> yplot;
    std::vector<double> yploterrors;
    std::vector<double> yploterrors2;
    stringstream plotTitle;
    std::string xAxisName;
    std::cout << "Okay time to do the bad if bit" << std::endl;
    
    if(gain){
      yplot = Gains2;
      yploterrors = gainErrors2;
      yploterrors2 = gainAgeingUncertainty;
      //plotTitle << "Gas Gain vs ";
    }
    else{
      yplot = Peaks2;
      yploterrors = scaledpeakErrors2;     
      yploterrors2 = ageingUncertaintyVector;
      //plotTitle << "Peak Pos vs ";    
    }
    
    
    //    plotTitle << AnodeName;

  
    //Choose which graph to plot based on input
    if(Scheme == "SchemeA"){
      std::cout << "Scheme is still Schema A" << std::endl;
      xplot = a1Voltage;
      //xplot = schemeACustomVoltage
      TGraphErrors* peakGraph2 = new TGraphErrors(5,&(xplot[0]),&(yplot[0]),0,&(yploterrors2[0]));
      TGraphErrors* peakGraph2Errors = new TGraphErrors(5,&(xplot[0]),&(yplot[0]),0,&(yploterrors[0]));
      plotTitle << "Scheme A";
      xAxisName = "Anode1 Voltage (V)";
      peakGraph2Errors->SetMarkerColor(kGreen+2);
      peakGraph2Errors->SetMarkerStyle(33);
      peakGraph2Errors->SetLineColor(kGreen+2);
      peakGraph2->SetMarkerColor(kGreen+2);
      peakGraph2->SetMarkerStyle(33);
      //peakGraph2->SetLineColor(3);                                                                                                  
      peakGraph2->SetLineStyle(2);
    }    
    if(Scheme == "SchemeCMod4"){
      //xplot = schemeCCustomVoltage;
      xplot = a2a1Voltage;
      TGraphErrors* peakGraph2 = new TGraphErrors(9,&(xplot[0]),&(yplot[0]),0,&(yploterrors2[0]));
      TGraphErrors* peakGraph2Errors = new TGraphErrors(9,&(xplot[0]),&(yplot[0]),0,&(yploterrors[0]));
      plotTitle << "Scheme C";
      xAxisName = "Potential Difference Between Anode 2 and Anode 1 (V)";
      peakGraph2Errors->SetMarkerColor(2);
      peakGraph2Errors->SetMarkerStyle(33);
      peakGraph2Errors->SetLineColor(2);
      peakGraph2->SetMarkerColor(2);
      peakGraph2->SetMarkerStyle(33);
      peakGraph2->SetLineStyle(2);
    }
    if(Scheme == "SchemeBMod4" || Scheme == "SchemeBModSpecialTrigAll"){
      xplot = a3a2Voltage;
      //xplot = schemeBCustomVoltage
      //TGraphErrors* peakGraph2 = new TGraphErrors(11,&(xplot[0]),&(Peaks2[0]),0,&(scaledpeakErrors2[0]));
      TGraphErrors* peakGraph2 = new TGraphErrors(11,&(xplot[0]),&(yplot[0]),0,&(yploterrors2[0]));
      TGraphErrors* peakGraph2Errors = new TGraphErrors(11,&(xplot[0]),&(yplot[0]),0,&(yploterrors[0]));
      plotTitle << "Scheme B";
      xAxisName = "Potential Difference Between Anode 3 and Anode 2 (V)";
      peakGraph2Errors->SetMarkerColor(4);
      peakGraph2Errors->SetMarkerStyle(33);
      peakGraph2Errors->SetLineColor(4);
      peakGraph2->SetMarkerColor(4);
      peakGraph2->SetMarkerStyle(33);
      peakGraph2->SetLineStyle(2);
      peakGraph2->GetXaxis()->SetLimits(-200,2800);
    }

    if(Scheme == "AllSchemesMod3"){
      xplot = runDateTime;
      TGraphErrors* peakGraph2 = new TGraphErrors(20,&(xplot[0]),&(yplot[0]),0,&(yploterrors[0]));
      plotTitle << "Run Start Time";
      xAxisName = "Run Start Time (Date)";
      peakGraph2->SetMarkerColor(9);
      peakGraph2->SetMarkerStyle(33);
      peakGraph2->SetLineColor(9);
      peakGraph2->GetXaxis()->SetDecimals(false);
    }

    if(Scheme == "GasAgeingMod4"){
      //xplot = gasAgeingCustomVoltage;
      //a1Voltage.push_back(1200);
      xplot = runDateTime;
      TGraphErrors* peakGraph2 = new TGraphErrors(3,&(xplot[0]),&(yplot[0]),0,&(yploterrors[0]));
      plotTitle << "Run Start Time";
      xAxisName = "Run Start Time (Date)";
      peakGraph2->SetMarkerColor(9);
      peakGraph2->SetMarkerStyle(33);
      peakGraph2->SetLineColor(9);
      peakGraph2->GetXaxis()->SetDecimals(false);
    }


    
    //    else{std::cout << "Looks like you've got some kind of a scheme problem" << std::endl;}

    std::cout << "You got past the bad if bit" << std::endl;

   // create the TGraph, draw it, and save it
    /*
   if(gain == false){
     TGraphErrors* peakGraph2 = new TGraphErrors(5,&(xplot[0]),&(Peaks2[0]),0,&(scaledpeakErrors2[0]));
     //TGraphErrors* peakGraph2 = new TGraphErrors(11,&(xplot[0]),&(Peaks2[0]),0,&(scaledpeakWidth2[0]));
   }

   if(gain == true){
     TGraphErrors* peakGraph2 = new TGraphErrors(5,&(xplot[0]),&(Gains2[0]),0,&(gainWidth2[0]));
   }
    */

    //GainString
    std::string GainString;
    if(gain){GainString = "Gain";}
    else{GainString = "Anode3PeakmV";}

    std::string SchemeName;
    if(Scheme == "SchemeA"){SchemeName = "SchemeA";}
    if(Scheme == "SchemeCMod4"){SchemeName = "SchemeC";}
    if(Scheme == "SchemeBModSpecialTrigAll" || Scheme == "SchemeBMod4"){SchemeName = "SchemeB";}
    if(Scheme == "GasAgeingMod4"){SchemeName = "GasAgeing";}
    if(Scheme == "AllSchemesMod3"){SchemeName = "AllSchemes";}



    //schemeACustomVoltage;
    //std::stringstream customVoltage;
    //customVoltageName << SchemeName << "CustomVoltage";
    //customVoltageName

    //Save Plot values to files for use in LightVsCharge.cxx

    if(Anode == ""){
      if(SchemeName == "SchemeA"){
	for(int iZack = 0; iZack < 5; iZack++){
	  std::stringstream zackFileName;
	  std::stringstream voltageForName;
	  voltageForName << schemeACustomVoltage[iZack];
	  zackFileName << "/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/fitDataUNCERTAIN" << SchemeName << "_" << GainString << voltageForName.str() << Anode <<".dat";
	  std::ofstream zackFile;
	  zackFile.open(zackFileName.str().c_str());
	  zackFile << yplot[iZack];
	  zackFile << "\t";
	  zackFile << yploterrors[iZack];
	  zackFile << "\t";
	  zackFile << yploterrors2[iZack];
	  zackFile.close();
	  std::cout << zackFileName.str() <<  " created" << std::endl;
	}
      }

      if(SchemeName == "SchemeB"){
	for(int iZack = 0; iZack < 11; iZack++){
	  std::stringstream zackFileName;
	  std::stringstream voltageForName;
	  voltageForName << schemeBCustomVoltage[iZack];
	  zackFileName << "/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/fitDataUNCERTAIN" << SchemeName << "_" << GainString << voltageForName.str() << Anode <<".dat";
	  std::ofstream zackFile;
	  zackFile.open(zackFileName.str().c_str());
	  zackFile << yplot[iZack];
	  zackFile << "\t";
	  zackFile << yploterrors[iZack];
	  zackFile << "\t";
	  zackFile << yploterrors2[iZack];
	  zackFile.close();
	  std::cout << zackFileName.str() <<  " created" << std::endl;
	}
      }

      if(SchemeName == "SchemeC"){
	for(int iZack = 0; iZack < 9; iZack++){
	  std::stringstream zackFileName;
	  std::stringstream voltageForName;
	  voltageForName << schemeCCustomVoltage[iZack];
	  zackFileName << "/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/fitDataUNCERTAIN" << SchemeName << "_" << GainString << voltageForName.str() << Anode <<".dat";
	  std::ofstream zackFile;
	  zackFile.open(zackFileName.str().c_str());
	  zackFile << yplot[iZack];
	  zackFile << "\t";
	  zackFile << yploterrors[iZack];
	  zackFile << "\t";
	  zackFile << yploterrors2[iZack];
	  zackFile.close();
	  std::cout << zackFileName.str() <<  " created" << std::endl;
	}
      }
    }
      
   /*   stringstream plotname;
   if(gain == false){
     plotname << "Peak Position vs Anode 1";
   }
   if(gain == true){
     plotname << "Gain vs " << plottoplot;
   } 
   */
 
   peakGraph2->SetTitle(plotTitle.str().c_str());
   peakGraph2->SetTitle(plotTitle.str().c_str());
   //peakGraph2->GetYaxis()->SetTitleSize(0.045);
   peakGraph2->GetYaxis()->SetTitleOffset(1.56);
   //peakGraph2->GetXaxis()->SetTitleSize(0.045);
   peakGraph2->GetXaxis()->SetTitleOffset(1.10);
   peakGraph2.Draw("AP");
   gStyle->SetTitleFontSize(0.08);
   //peakGraph2->GetXaxis()->SetTitle("Anode1 (V)");   
   peakGraph2->GetXaxis()->SetTitle(xAxisName.c_str());
   peakGraph2Errors->Draw("p same");









   //gStyle->SetOptFit(1);
   //   TMultiGraph* mg = new TMultiGraph();
   //mg->Add(gr, "P");
   //mg->Add(gr2, "P");
   //mg->Add(gr4, "P");
   // mg->Add(peakGraph2, "P");
   //mg->Draw("A");


   
   //   int noRuns = runNumbers.size();
   //plottitle <<  runNumbers[0] << "_to_" << runNumbers[noRuns - 1];


   if(gain == true){
     std::stringstream TitleToSet;
     TitleToSet << "Gas Gain " << AnodeName;
     peakGraph2->GetYaxis()->SetTitle(TitleToSet.str().c_str());
     c1->Print(("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/VoltageVsGasGain_SmallAxisLabels_"+SchemeName+"_"+Anode+".pdf").c_str());
   }

   if(gain == false){
     std::stringstream TitleToSet;
     TitleToSet << AnodeName << " Peak Position (mV)";
     peakGraph2->GetYaxis()->SetTitle(TitleToSet.str().c_str());
     c1->Print(("/scratch0/hrichie/hptpc_ritchie/HPTPC/data/fitData/VoltageVsPeakPosition_SmallAxisLabels_"+SchemeName+"_"+Anode+".pdf").c_str());
   }

   c1->Update();
}

